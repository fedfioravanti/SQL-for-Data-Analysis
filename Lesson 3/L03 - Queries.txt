SELECT SUM (poster_qty)
FROM orders


SELECT SUM (standard_qty)
FROM orders


SELECT SUM (total_amt_usd)
FROM orders


SELECT standard_amt_usd + gloss_amt_usd AS total_standard_gloss
FROM orders


SELECT SUM (standard_amt_usd)/SUM (standard_qty) AS standard_price_per_unit
FROM orders


-----


SELECT MIN(occurred_at)
FROM orders


SELECT occurred_at
FROM orders
ORDER BY occurred_at
LIMIT 1


SELECT MAX(occurred_at)
FROM web_events


SELECT occurred_at
FROM web_events
ORDER BY occurred_at DESC
LIMIT 1


SELECT AVG(standard_amt_usd) AS avg_standard_usd,
AVG(gloss_amt_usd) AS avg_gloss_usd,
AVG(poster_amt_usd) AS avg_poster_usd,
AVG(standard_qty) AS avg_standard_qty,
AVG(gloss_qty) AS avg_gloss_qty,
AVG(poster_qty) AS avg_poster_qty
FROM orders


SELECT *
FROM (SELECT total_amt_usd
      FROM orders
      ORDER BY total_amt_usd
      LIMIT 3457) AS Table1
ORDER BY total_amt_usd DESC
LIMIT 2


-----


SELECT a.name account_name, 
o.occurred_at order_date
FROM orders o
JOIN accounts a
ON a.id = o.account_id
ORDER BY o.occurred_at
LIMIT 1


SELECT SUM(total_amt_usd) total_sales,
a.name company_name 
FROM orders o
JOIN accounts a
ON a.id = o.account_id
GROUP BY a.name
ORDER BY a.name


SELECT w.occurred_at date,
w.channel channel,
a.name account_name 
FROM web_events w
JOIN accounts a
ON a.id = w.account_id
ORDER BY w.occurred_at DESC
LIMIT 1


SELECT channel,
SUM(id) as times
FROM web_events
GROUP BY channel


SELECT a.primary_poc primary_contact
FROM web_events w
JOIN accounts a
ON a.id = w.account_id
ORDER BY w.occurred_at
LIMIT 1


SELECT a.name account_name,
MIN(o.total_amt_usd) total_usd
FROM orders o
JOIN accounts a
ON a.id = o.account_id
GROUP BY a.name
ORDER BY total_usd


SELECT r.name region,
COUNT(s.name) sales_reps_number
FROM region r
JOIN sales_reps s
ON s.region_id = r.id
GROUP BY r.name
ORDER BY sales_reps_number


-----


SELECT a.name account_name, AVG(o.standard_qty) avg_standard, AVG(o.gloss_qty) avg_gloss, AVG(o.poster_qty) avg_poster
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.name


SELECT a.name account_name, AVG(o.standard_amt_usd) avg_standard_USD, AVG(o.gloss_amt_usd) avg_gloss_USD, AVG(o.poster_amt_usd) avg_poster_USD
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.name


SELECT s.name sales_rep_name, w.channel channel, COUNT(w.channel) occurrences
FROM accounts a
JOIN sales_reps s
ON a.sales_rep_id = s.id
JOIN web_events w
ON a.id = w.account_id
GROUP BY s.name, w.channel
ORDER BY occurrences DESC


SELECT r.name region, w.channel channel, COUNT(w.channel) occurrences
FROM accounts a
JOIN sales_reps s
ON a.sales_rep_id = s.id
JOIN web_events w
ON a.id = w.account_id
JOIN region r
ON s.region_id = r.id
GROUP BY r.name, w.channel
ORDER BY occurrences DESC


-----


SELECT a.id as "account id", r.id as "region id", 
a.name as "account name", r.name as "region name"
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
JOIN region r
ON r.id = s.region_id


SELECT DISTINCT id, name
FROM accounts


SELECT s.id, s.name, COUNT(*) num_accounts
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.id, s.name
ORDER BY num_accounts


SELECT DISTINCT id, name
FROM sales_reps


-----


SELECT s.id, s.name, COUNT(*) num_accounts
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.id, s.name
HAVING COUNT(*) > 5
ORDER BY num_accounts


SELECT a.id, a.name, COUNT(*) num_orders
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING COUNT(*) > 20
ORDER BY num_orders


SELECT a.id, a.name, COUNT(*) num_orders
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY num_orders DESC
LIMIT 1


SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING SUM(o.total_amt_usd) > 30000
ORDER BY total_spent


SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING SUM(o.total_amt_usd) < 1000
ORDER BY total_spent


SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY total_spent DESC
LIMIT 1


SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY total_spent
LIMIT 1


SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY a.id, a.name, w.channel
HAVING COUNT(*) > 6 AND w.channel = 'facebook'
ORDER BY use_of_channel


SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
WHERE w.channel = 'facebook'
GROUP BY a.id, a.name, w.channel
ORDER BY use_of_channel DESC
LIMIT 1


SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY a.id, a.name, w.channel
ORDER BY use_of_channel DESC
LIMIT 10


-----


SELECT DATE_PART('year', occurred_at) ord_year,  SUM(total_amt_usd) total_spent
FROM orders
GROUP BY 1
ORDER BY 2 DESC


SELECT DATE_PART('month', occurred_at) ord_month, SUM(total_amt_usd) total_spent
FROM orders
WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
GROUP BY 1
ORDER BY 2 DESC


SELECT DATE_PART('year', occurred_at) ord_year,  COUNT(*) total_sales
FROM orders
GROUP BY 1
ORDER BY 2 DESC


SELECT DATE_PART('month', occurred_at) ord_month, COUNT(*) total_sales
FROM orders
WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
GROUP BY 1
ORDER BY 2 DESC


SELECT DATE_TRUNC('month', o.occurred_at) ord_date, SUM(o.gloss_amt_usd) tot_spent
FROM orders o 
JOIN accounts a
ON a.id = o.account_id
WHERE a.name = 'Walmart'
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1


-----


SELECT account_id, total_amt_usd,
CASE WHEN total_amt_usd < 3000 THEN 'Small'
ELSE 'Large' END AS level
FROM orders


SELECT CASE WHEN total < 1000 THEN 'Less than 1000'
WHEN total BETWEEN 1000 AND 1999 THEN 'Between 1000 and 2000'
ELSE 'At Least 2000' END as quantity_range,
COUNT(*) AS orders
FROM orders
GROUP BY 1


SELECT a.name, SUM(o.total_amt_usd), CASE WHEN SUM(o.total_amt_usd) < 100000 THEN 'under 100,000'
WHEN SUM(o.total_amt_usd) BETWEEN 100000 AND 200000 THEN '200,000 and 100,000'
ELSE 'greater than 200,000' END as LTV_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
GROUP BY a.name
ORDER BY 2 DESC


SELECT a.name, SUM(o.total_amt_usd), CASE WHEN SUM(o.total_amt_usd) < 100000 THEN 'under 100,000'
WHEN SUM(o.total_amt_usd) BETWEEN 100000 AND 200000 THEN '200,000 and 100,000'
ELSE 'greater than 200,000' END as LTV_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
WHERE o.occurred_at BETWEEN '2016-01-01' AND '2017-12-31'
GROUP BY a.name
ORDER BY 2 DESC


SELECT s.name sales_rep, COUNT(o.id) total_orders, CASE WHEN COUNT(o.id) < 200 THEN 'not'
ELSE 'top' END as top_performer
FROM orders o
JOIN accounts a
ON o.account_id = a.id
JOIN sales_reps s
ON a.sales_rep_id = s.id
GROUP BY s.name
ORDER BY 2 DESC


SELECT s.name sales_rep, COUNT(o.id) total_orders, SUM(o.total_amt_usd) total_sales, CASE WHEN COUNT(o.id) < 150 OR SUM(o.total_amt_usd) < 500000  THEN 'low'
WHEN COUNT(o.id) BETWEEN 150 AND 200 OR SUM(o.total_amt_usd) BETWEEN 500000 AND 750000 THEN 'middle'
ELSE 'top' END as performer_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
JOIN sales_reps s
ON a.sales_rep_id = s.id
GROUP BY s.name
ORDER BY 3 DESC



